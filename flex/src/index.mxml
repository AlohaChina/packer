<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ui="org.samchon.library.ui.*"
			   xmlns:component="bws.packer.component.*"
			   
			   creationComplete="creationCompleted(event)"
			   width="400" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import org.samchon.protocol.invoke.Invoke;
			
			import bws.packer.socket.Client;
			
			private var client:Client;
			
			/* ----------------------------------------------------
				CONSTRUCTORS
			---------------------------------------------------- */
			protected function creationCompleted(event:FlexEvent):void
			{
				client = new Client(this);
				
				ExternalInterface.addCallback("sendData", _replyData);
				
				goServerInfo();
				loadSample();
			}
			
			/**
			 * Fetch server info.
			 */
			protected function goServerInfo():void
			{
				//statusLabel.text = "서버에 접속중입니다...";
				
				try
				{
					var urlLoader:URLLoader = new URLLoader();
					urlLoader.addEventListener(Event.COMPLETE, handleServerInfo);
					urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleServerFail);
					urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleServerFail);
					
					urlLoader.load(new URLRequest("server.xml"));
				}
				catch (error:Error)
				{
				}
			}
			
			/**
			 * Connect to the C++ server.
			 * 
			 * @param ip IP address of target server.
			 * @param port Port number of target server.
			 */
			protected function goConnect(ip:String, port:int):void
			{
				client.addEventListener(Event.CONNECT, handleConnect);
				client.addEventListener(IOErrorEvent.IO_ERROR, handleServerFail);
				client.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleServerFail);
				client.addEventListener(Event.CLOSE, handleServerFail);
				
				trace(ip, port);
				client.connect(ip, port);
			}
			
			/**
			 * @private
			 */
			protected function handleServerInfo(event:Event):void
			{
				var xml:XML = new XML(event.target.data);
				var ip:String = xml.ip;
				var port:int = xml.port;
				
				goConnect(ip, port);
			}
			
			/**
			 * @private
			 */
			protected function handleConnect(event:Event):void
			{
				// NOTHING TO DO
			}
			
			protected function handleServerFail(event:Event):void
			{
				// NOTHING TO DO ESPECIALLY
			}
			
			protected function loadSample():void
			{
				try
				{
					var urlLoader:URLLoader = new URLLoader();
					urlLoader.addEventListener(Event.COMPLETE, handleLoadSample);
					urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleServerFail);
					urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleServerFail);
					
					urlLoader.load(new URLRequest("sample.xml"));
				}
				catch (error:Error)
				{
				}
			}
			
			protected function handleLoadSample(event:Event):void
			{
				var xml:XML = new XML(event.target.data);
				
				this.parameterMovie.constructPackerForm(xml);
			}
			
			/* ----------------------------------------------------
				MESSAGE CHAIN
			---------------------------------------------------- */
			public function sendData(invoke:Invoke):void
			{
				if (client.connected == true)
					client.sendData(invoke);
				else
				{
					ExternalInterface.call
					(
						"bws.packer.main",
						invoke.toXML().toXMLString()
					);
				}
			}
			
			public function _replyData(str:String):void
			{
				trace(str);
				var invoke:Invoke = new Invoke(new XML(str));
				
				this.replyData(invoke);
			}
			
			public function replyData(invoke:Invoke):void
			{
				if (invoke.getListener() == "setProgress")
				{
					var completed:int = invoke.at(0).getValue();
					var total:int = invoke.at(1).getValue();
					var percent:Number = completed / Number(total) * 100.0;
					
					progressBar.setProgress(completed, total);
					//statusLabel.text = StringUtil.substitute("진행 상황: {0} of {1}: {2}%", completed, total, percent);
				}
				else
				{
					parameterMovie.replyData(invoke);
					resultMovie.replyData(invoke);
				}
			}
			
		]]>
	</fx:Script>

	<ui:VGroup width="100%" height="100%" 
			   padding="5">
		<s:Panel id="panel" 
				 title="3D Packer" 
				 width="100%" height="100%">
			<ui:VGroup width="100%" height="100%" 
					   padding="5">
				<mx:TabNavigator id="tabNavigator"
								 creationPolicy="all"
								 width="100%" height="100%">
					<s:NavigatorContent label="Item Editor" 
										width="100%" height="100%">
						<component:ParameterMovie id="parameterMovie"
												  application="{this}"
												  width="100%" height="100%" 
												  padding="5" />
					</s:NavigatorContent>
					<s:NavigatorContent label="(Packed) Result" 
										width="100%" height="100%">
						<component:ResultMovie id="resultMovie" 
											   application="{this}"
											   width="100%" height="100%" 
											   padding="5" />
					</s:NavigatorContent>
				</mx:TabNavigator>
			</ui:VGroup>
			<s:controlBarContent>
				<s:HGroup width="100%" 
						  horizontalAlign="right">
					<!--<s:Label id="statusLabel" />-->
					<mx:ProgressBar id="progressBar" width="100%" labelPlacement="right"
									mode="manual"/>
				</s:HGroup>
			</s:controlBarContent>
		</s:Panel>
	</ui:VGroup>
</s:Application>
